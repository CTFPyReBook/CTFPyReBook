/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'talker.cpython-311-x86_64-linux-gnu.so'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct PyCodeObject;
struct PyMemberDef;
struct PyGetSetDef;
struct PyMethodDef;
struct PyFunctionObject;
struct _stack_chunk;
struct _err_stackitem;
struct _PyCFrame;
struct _PyInterpreterFrame;
struct PyBufferProcs;
struct PyMappingMethods;
struct PySequenceMethods;
struct PyNumberMethods;
struct PyAsyncMethods;
struct Py_buffer;
struct _object;
struct _frame;
struct _typeobject;
struct _ts;

/* 1 */
struct __attribute__((aligned(8))) Elf64_Sym
{
  unsigned __int32 st_name;
  unsigned __int8 st_info;
  unsigned __int8 st_other;
  unsigned __int16 st_shndx;
  unsigned __int64 st_value;
  unsigned __int64 st_size;
};

/* 2 */
struct Elf64_Rela
{
  unsigned __int64 r_offset;
  unsigned __int64 r_info;
  __int64 r_addend;
};

/* 3 */
struct Elf64_Dyn
{
  unsigned __int64 d_tag;
  unsigned __int64 d_un;
};

/* 4 */
struct __attribute__((aligned(4))) Elf64_Verneed
{
  unsigned __int16 vn_version;
  unsigned __int16 vn_cnt;
  unsigned __int32 vn_file;
  unsigned __int32 vn_aux;
  unsigned __int32 vn_next;
};

/* 5 */
struct __attribute__((aligned(4))) Elf64_Vernaux
{
  unsigned __int32 vna_hash;
  unsigned __int16 vna_flags;
  unsigned __int16 vna_other;
  unsigned __int32 vna_name;
  unsigned __int32 vna_next;
};

/* 6 */
typedef _err_stackitem _PyErr_StackItem;

/* 65 */
typedef _object PyObject;

/* 57 */
struct _err_stackitem
{
  PyObject *exc_value;
  _err_stackitem *previous_item;
};

/* 94 */
typedef __int64 __ssize_t;

/* 97 */
typedef __ssize_t ssize_t;

/* 40 */
typedef ssize_t Py_ssize_t;

/* 88 */
typedef _typeobject PyTypeObject;

/* 98 */
struct _object
{
  Py_ssize_t ob_refcnt;
  PyTypeObject *ob_type;
};

/* 9 */
struct PyVarObject
{
  PyObject ob_base;
  Py_ssize_t ob_size;
};

/* 12 */
typedef void (*destructor)(PyObject *);

/* 30 */
typedef PyObject *(*getattrfunc)(PyObject *, char *);

/* 29 */
typedef int (*setattrfunc)(PyObject *, char *, PyObject *);

/* 26 */
typedef PyObject *(*reprfunc)(PyObject *);

/* 47 */
typedef Py_ssize_t Py_hash_t;

/* 28 */
typedef Py_hash_t (*hashfunc)(PyObject *);

/* 27 */
typedef PyObject *(*ternaryfunc)(PyObject *, PyObject *, PyObject *);

/* 25 */
typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);

/* 24 */
typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);

/* 44 */
typedef int (*visitproc)(PyObject *, void *);

/* 23 */
typedef int (*traverseproc)(PyObject *, visitproc, void *);

/* 13 */
typedef int (*inquiry)(PyObject *);

/* 22 */
typedef PyObject *(*richcmpfunc)(PyObject *, PyObject *, int);

/* 21 */
typedef PyObject *(*getiterfunc)(PyObject *);

/* 20 */
typedef PyObject *(*iternextfunc)(PyObject *);

/* 19 */
typedef PyObject *(*descrgetfunc)(PyObject *, PyObject *, PyObject *);

/* 18 */
typedef int (*descrsetfunc)(PyObject *, PyObject *, PyObject *);

/* 17 */
typedef int (*initproc)(PyObject *, PyObject *, PyObject *);

/* 16 */
typedef PyObject *(*allocfunc)(PyTypeObject *, Py_ssize_t);

/* 15 */
typedef PyObject *(*newfunc)(PyTypeObject *, PyObject *, PyObject *);

/* 14 */
typedef void (*freefunc)(void *);

/* 42 */
typedef unsigned __int64 size_t;

/* 11 */
typedef PyObject *(*vectorcallfunc)(PyObject *, PyObject *const *, size_t, PyObject *);

/* 101 */
struct _typeobject
{
  PyVarObject ob_base;
  const char *tp_name;
  Py_ssize_t tp_basicsize;
  Py_ssize_t tp_itemsize;
  destructor tp_dealloc;
  Py_ssize_t tp_vectorcall_offset;
  getattrfunc tp_getattr;
  setattrfunc tp_setattr;
  PyAsyncMethods *tp_as_async;
  reprfunc tp_repr;
  PyNumberMethods *tp_as_number;
  PySequenceMethods *tp_as_sequence;
  PyMappingMethods *tp_as_mapping;
  hashfunc tp_hash;
  ternaryfunc tp_call;
  reprfunc tp_str;
  getattrofunc tp_getattro;
  setattrofunc tp_setattro;
  PyBufferProcs *tp_as_buffer;
  unsigned __int64 tp_flags;
  const char *tp_doc;
  traverseproc tp_traverse;
  inquiry tp_clear;
  richcmpfunc tp_richcompare;
  Py_ssize_t tp_weaklistoffset;
  getiterfunc tp_iter;
  iternextfunc tp_iternext;
  PyMethodDef *tp_methods;
  PyMemberDef *tp_members;
  PyGetSetDef *tp_getset;
  PyTypeObject *tp_base;
  PyObject *tp_dict;
  descrgetfunc tp_descr_get;
  descrsetfunc tp_descr_set;
  Py_ssize_t tp_dictoffset;
  initproc tp_init;
  allocfunc tp_alloc;
  newfunc tp_new;
  freefunc tp_free;
  inquiry tp_is_gc;
  PyObject *tp_bases;
  PyObject *tp_mro;
  PyObject *tp_cache;
  PyObject *tp_subclasses;
  PyObject *tp_weaklist;
  destructor tp_del;
  unsigned int tp_version_tag;
  destructor tp_finalize;
  vectorcallfunc tp_vectorcall;
};

/* 80 */
typedef PyObject *(*unaryfunc)(PyObject *);

/* 96 */
enum PySendResult : __int32
{
  PYGEN_RETURN = 0x0,
  PYGEN_ERROR = 0xFFFFFFFF,
  PYGEN_NEXT = 0x1,
};

/* 79 */
typedef PySendResult (*sendfunc)(PyObject *, PyObject *, PyObject **);

/* 76 */
struct PyAsyncMethods
{
  unaryfunc am_await;
  unaryfunc am_aiter;
  unaryfunc am_anext;
  sendfunc am_send;
};

/* 82 */
typedef PyObject *(*binaryfunc)(PyObject *, PyObject *);

/* 75 */
struct PyNumberMethods
{
  binaryfunc nb_add;
  binaryfunc nb_subtract;
  binaryfunc nb_multiply;
  binaryfunc nb_remainder;
  binaryfunc nb_divmod;
  ternaryfunc nb_power;
  unaryfunc nb_negative;
  unaryfunc nb_positive;
  unaryfunc nb_absolute;
  inquiry nb_bool;
  unaryfunc nb_invert;
  binaryfunc nb_lshift;
  binaryfunc nb_rshift;
  binaryfunc nb_and;
  binaryfunc nb_xor;
  binaryfunc nb_or;
  unaryfunc nb_int;
  void *nb_reserved;
  unaryfunc nb_float;
  binaryfunc nb_inplace_add;
  binaryfunc nb_inplace_subtract;
  binaryfunc nb_inplace_multiply;
  binaryfunc nb_inplace_remainder;
  ternaryfunc nb_inplace_power;
  binaryfunc nb_inplace_lshift;
  binaryfunc nb_inplace_rshift;
  binaryfunc nb_inplace_and;
  binaryfunc nb_inplace_xor;
  binaryfunc nb_inplace_or;
  binaryfunc nb_floor_divide;
  binaryfunc nb_true_divide;
  binaryfunc nb_inplace_floor_divide;
  binaryfunc nb_inplace_true_divide;
  unaryfunc nb_index;
  binaryfunc nb_matrix_multiply;
  binaryfunc nb_inplace_matrix_multiply;
};

/* 83 */
typedef Py_ssize_t (*lenfunc)(PyObject *);

/* 84 */
typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);

/* 86 */
typedef int (*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);

/* 85 */
typedef int (*objobjproc)(PyObject *, PyObject *);

/* 74 */
struct PySequenceMethods
{
  lenfunc sq_length;
  binaryfunc sq_concat;
  ssizeargfunc sq_repeat;
  ssizeargfunc sq_item;
  void *was_sq_slice;
  ssizeobjargproc sq_ass_item;
  void *was_sq_ass_slice;
  objobjproc sq_contains;
  binaryfunc sq_inplace_concat;
  ssizeargfunc sq_inplace_repeat;
};

/* 81 */
typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);

/* 73 */
struct PyMappingMethods
{
  lenfunc mp_length;
  binaryfunc mp_subscript;
  objobjargproc mp_ass_subscript;
};

/* 78 */
typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);

/* 77 */
typedef void (*releasebufferproc)(PyObject *, Py_buffer *);

/* 72 */
struct PyBufferProcs
{
  getbufferproc bf_getbuffer;
  releasebufferproc bf_releasebuffer;
};

/* 35 */
typedef PyObject *(*PyCFunction)(PyObject *, PyObject *);

/* 36 */
struct PyMethodDef
{
  const char *ml_name;
  PyCFunction ml_meth;
  int ml_flags;
  const char *ml_doc;
};

/* 31 */
struct PyMemberDef
{
  const char *name;
  int type;
  Py_ssize_t offset;
  int flags;
  const char *doc;
};

/* 33 */
typedef PyObject *(*getter)(PyObject *, void *);

/* 32 */
typedef int (*setter)(PyObject *, PyObject *, void *);

/* 34 */
struct PyGetSetDef
{
  const char *name;
  getter get;
  setter set;
  const char *doc;
  void *closure;
};

/* 87 */
struct Py_buffer
{
  void *buf;
  PyObject *obj;
  Py_ssize_t len;
  Py_ssize_t itemsize;
  int readonly;
  int ndim;
  char *format;
  Py_ssize_t *shape;
  Py_ssize_t *strides;
  Py_ssize_t *suboffsets;
  void *internal;
};

/* 92 */
typedef unsigned __int8 __uint8_t;

/* 60 */
typedef __uint8_t uint8_t;

/* 63 */
struct _opaque
{
  int computed_line;
  const uint8_t *lo_next;
  const uint8_t *limit;
};

/* 99 */
struct _line_offsets
{
  int ar_start;
  int ar_end;
  int ar_line;
  _opaque opaque;
};

/* 61 */
typedef _line_offsets PyCodeAddressRange;

/* 7 */
struct PyTraceInfo
{
  PyCodeObject *code;
  PyCodeAddressRange bounds;
};

/* 10 */
struct __attribute__((aligned(8))) PyCodeObject
{
  PyVarObject ob_base;
  PyObject *co_consts;
  PyObject *co_names;
  PyObject *co_exceptiontable;
  int co_flags;
  __int16 co_warmup;
  __int16 _co_linearray_entry_size;
  int co_argcount;
  int co_posonlyargcount;
  int co_kwonlyargcount;
  int co_stacksize;
  int co_firstlineno;
  int co_nlocalsplus;
  int co_nlocals;
  int co_nplaincellvars;
  int co_ncellvars;
  int co_nfreevars;
  PyObject *co_localsplusnames;
  PyObject *co_localspluskinds;
  PyObject *co_filename;
  PyObject *co_name;
  PyObject *co_qualname;
  PyObject *co_linetable;
  PyObject *co_weakreflist;
  PyObject *_co_code;
  char *_co_linearray;
  int _co_firsttraceable;
  void *co_extra;
  char co_code_adaptive[1];
};

/* 62 */
typedef _frame PyFrameObject;

/* 8 */
typedef int (*Py_tracefunc)(PyObject *, PyFrameObject *, int, PyObject *);

/* 100 */
struct _frame
{
  PyObject ob_base;
  PyFrameObject *f_back;
  _PyInterpreterFrame *f_frame;
  PyObject *f_trace;
  int f_lineno;
  char f_trace_lines;
  char f_trace_opcodes;
  char f_fast_as_locals;
  PyObject *_f_frame_data[1];
};

/* 91 */
typedef unsigned __int16 __uint16_t;

/* 95 */
typedef __uint16_t uint16_t;

/* 48 */
typedef uint16_t _Py_CODEUNIT;

/* 59 */
struct _PyInterpreterFrame
{
  PyFunctionObject *f_func;
  PyObject *f_globals;
  PyObject *f_builtins;
  PyObject *f_locals;
  PyCodeObject *f_code;
  PyFrameObject *frame_obj;
  _PyInterpreterFrame *previous;
  _Py_CODEUNIT *prev_instr;
  int stacktop;
  bool is_entry;
  char owner;
  PyObject *localsplus[1];
};

/* 90 */
typedef unsigned int __uint32_t;

/* 64 */
typedef __uint32_t uint32_t;

/* 49 */
struct __attribute__((aligned(8))) PyFunctionObject
{
  PyObject ob_base;
  PyObject *func_globals;
  PyObject *func_builtins;
  PyObject *func_name;
  PyObject *func_qualname;
  PyObject *func_code;
  PyObject *func_defaults;
  PyObject *func_kwdefaults;
  PyObject *func_closure;
  PyObject *func_doc;
  PyObject *func_dict;
  PyObject *func_weakreflist;
  PyObject *func_module;
  PyObject *func_annotations;
  vectorcallfunc vectorcall;
  uint32_t func_version;
};

/* 37 */
struct PyModuleDef_Slot
{
  int slot;
  void *value;
};

/* 66 */
struct PyModuleDef_Base
{
  PyObject ob_base;
  PyObject *(*m_init)(void);
  Py_ssize_t m_index;
  PyObject *m_copy;
};

/* 38 */
struct PyModuleDef
{
  PyModuleDef_Base m_base;
  const char *m_name;
  const char *m_doc;
  Py_ssize_t m_size;
  PyMethodDef *m_methods;
  PyModuleDef_Slot *m_slots;
  traverseproc m_traverse;
  inquiry m_clear;
  freefunc m_free;
};

/* 39 */
struct PyTupleObject
{
  PyVarObject ob_base;
  PyObject *ob_item[1];
};

/* 41 */
struct PyListObject
{
  PyVarObject ob_base;
  PyObject **ob_item;
  Py_ssize_t allocated;
};

/* 43 */
struct __attribute__((aligned(8))) __Pyx_StringTabEntry
{
  PyObject **p;
  const char *s;
  const Py_ssize_t n;
  const char *encoding;
  const char is_unicode;
  const char is_str;
  const char intern;
};

/* 45 */
struct PyCFunctionObject
{
  PyObject ob_base;
  PyMethodDef *m_ml;
  PyObject *m_self;
  PyObject *m_module;
  PyObject *m_weakreflist;
  vectorcallfunc vectorcall;
};

/* 52 */
struct PyCMethodObject
{
  PyCFunctionObject func;
  PyTypeObject *mm_class;
};

/* 46 */
struct __pyx_CyFunctionObject
{
  PyCMethodObject func;
  PyObject *func_dict;
  PyObject *func_name;
  PyObject *func_qualname;
  PyObject *func_doc;
  PyObject *func_globals;
  PyObject *func_code;
  PyObject *func_closure;
  void *defaults;
  int defaults_pyobjects;
  size_t defaults_size;
  int flags;
  PyObject *defaults_tuple;
  PyObject *defaults_kwdict;
  PyObject *(*defaults_getter)(PyObject *);
  PyObject *func_annotations;
  PyObject *func_is_coroutine;
};



/* 51 */
struct __attribute__((aligned(8))) __Pyx_CodeObjectCacheEntry
{
  PyCodeObject *code_object;
  int code_line;
};

/* 53 */
typedef _stack_chunk _PyStackChunk;

/* 56 */
struct _stack_chunk
{
  _stack_chunk *previous;
  size_t size;
  size_t top;
  PyObject *data[1];
};

/* 54 */
typedef void PyInterpreterState;

/* 55 */
typedef _ts PyThreadState;

/* 89 */
typedef unsigned __int64 __uint64_t;

/* 69 */
typedef __uint64_t uint64_t;

/* 58 */
struct _PyCFrame
{
  uint8_t use_tracing;
  _PyInterpreterFrame *current_frame;
  _PyCFrame *previous;
};

/* 103 */
struct _ts
{
  PyThreadState *prev;
  PyThreadState *next;
  PyInterpreterState *interp;
  int _initialized;
  int _static;
  int recursion_remaining;
  int recursion_limit;
  int recursion_headroom;
  int tracing;
  int tracing_what;
  _PyCFrame *cframe;
  Py_tracefunc c_profilefunc;
  Py_tracefunc c_tracefunc;
  PyObject *c_profileobj;
  PyObject *c_traceobj;
  PyObject *curexc_type;
  PyObject *curexc_value;
  PyObject *curexc_traceback;
  _PyErr_StackItem *exc_info;
  PyObject *dict;
  int gilstate_counter;
  PyObject *async_exc;
  unsigned __int64 thread_id;
  unsigned __int64 native_thread_id;
  int trash_delete_nesting;
  PyObject *trash_delete_later;
  void (*on_delete)(void *);
  void *on_delete_data;
  int coroutine_origin_tracking_depth;
  PyObject *async_gen_firstiter;
  PyObject *async_gen_finalizer;
  PyObject *context;
  uint64_t context_ver;
  uint64_t id;
  PyTraceInfo trace_info;
  _PyStackChunk *datastack_chunk;
  PyObject **datastack_top;
  PyObject **datastack_limit;
  _PyErr_StackItem exc_state;
  _PyCFrame root_cframe;
};

/* 67 */
typedef void PyDictValues;

/* 68 */
typedef void PyDictKeysObject;

/* 70 */
typedef uint32_t digit;

/* 71 */
typedef int wchar_t;

/* 93 */
typedef __int64 __int64_t;

/* 102 */
struct __attribute__((aligned(8))) _longobject
{
  PyVarObject ob_base;
  digit ob_digit[1];
};

/* 104 */
struct __Pyx_CodeObjectCache
{
  int count;
  int max_count;
  __Pyx_CodeObjectCacheEntry *entries;
};

/* 105 */
typedef PyObject *(*PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);

/* 106 */
typedef PyObject *(*_PyCFunctionFastWithKeywords)(PyObject *, PyObject *const *, Py_ssize_t, PyObject *);

/* 107 */
typedef PyObject *(*PyCFunctionWithKeywords)(PyObject *, PyObject *, PyObject *);

/* 108 */
struct PyDictObject
{
  PyObject ob_base;
  Py_ssize_t ma_used;
  uint64_t ma_version_tag;
  PyDictKeysObject *ma_keys;
  PyDictValues *ma_values;
};

/* 109 */
struct _dictvalues;

/* 110 */
struct PyASCIIObject
{
  PyObject ob_base;
  Py_ssize_t length;
  Py_hash_t hash;
  struct
  {
    _BYTE gap0[4];
  } state;
  wchar_t *wstr;
};

/* 111 */
struct _dictkeysobject;

/* 112 */
struct _is;

/* 113 */
typedef _longobject PyLongObject;



/* 115 */
typedef __int64_t int64_t;

